import commandsJson from '../docs/commands.json' assert {type: "json"}
import config from './config/config.js'
import { isAuthenticated } from './services/authService.js'
import { listPollsService, pollKeyboardWithOptions, sendPollResponseService } from './services/pollService.js'
import { getWelcomeBookMesh, welcomeBookCallbacks } from './services/welcomeBookService.js'
import navButtonsMesh from './util/navigationBar.js'

class Handler {
    #wbCallbacks = {}
    #pollCallbacks = {}
    states = {}
    constructor(bot) {
        this._bot = bot
    }

    #closeKeyboard = async(msg) => {
        const current_msg = await this._bot.sendMessage(msg.chat.id, "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ", {
            reply_markup: {
                remove_keyboard: true
            }
        })
        // this._bot.deleteMessage(msg.chat.id, current_msg.message_id)
        this._bot.deleteMessage(msg.chat.id, msg.message_id)
    }

    #closeInlineKeyboard = async(ctx) => {
        this._bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
        this._bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id - 1)
    }

    configure = () => {
        this._bot.setMyCommands(commandsJson)
        this.#wbCallbacks = welcomeBookCallbacks()
    }

    listen = async() => {
        this._bot.on('message', async(msg) => {
            console.log(msg)
        })

        // Process commands
        this._bot.onText(RegExp('^/'), async(msg) => {
            switch(msg.text) {
                case '/start': 
                    this._bot.sendMessage(msg.chat.id, `üëãüèª –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}`)
                    if (!isAuthenticated(msg.chat.username)) {
                        this._bot.sendMessage(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ—é –ø–æ—á—Ç—É")
                        this.states[msg.chat.id] = {awaitingEmail: true}
                    }
                    return 
                // case '/auth':
                //     if (!await isAuthenticated(msg.chat.username, msg.chat.id)) {
                //         this.states[msg.chat.id] = {awaitingCredentials: true}
                //         return this._bot.sendMessage(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")
                //     } else {
                //         return this._bot.sendMessage(msg.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
                //     }
                case '/help': 
                    return this._bot.sendMessage(msg.chat.id, `–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏`)
                case '/ref': 
                    return this._bot.sendMessage(msg.chat.id, config.BOT_URL)
                case '/menu': 
                    return this._bot.sendMessage(msg.chat.id, '–ú–µ–Ω—é –±–æ—Ç–∞', {
                        reply_markup: {
                            keyboard: [
                                ["üó∫Ô∏è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å", "‚úÖ –û–ø—Ä–æ—Å"],
                                ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
                                ["‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"]
                            ],
                            resize_keyboard: true,
                            one_time_keyboard: true
                        }
                    });
            }
        })
        
        // Process text
        this._bot.onText(RegExp('^[^/]'), async(msg) => {

            // Authorize listener
            if (this.states[msg.chat.id] && this.states[msg.chat.id].awaitingEmail) {
                const email = msg.text
                if (!email) {
                    return this._bot.sendMessage(msg.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                }
                this.states[msg.chat.id].awaitingEmail = false
                
                
            }

            switch(msg.text) {
                case 'üó∫Ô∏è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å': 
                    return this._bot.sendMessage(msg.chat.id, '–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ö–û–ú–ê–ù–î–£ –ê–û ¬´–ù–ö ¬´“ö–¢–ñ¬ª!', {
                        reply_markup: {inline_keyboard: getWelcomeBookMesh()},
                        resize_keyboard: true
                    })
                case '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é': 
                    return this.#closeKeyboard(msg)
                case '‚úÖ –û–ø—Ä–æ—Å':
                    if (!(await isAuthenticated(msg.chat.username, msg.chat.id))) {
                        return this._bot.sendMessage(msg.chat.id, "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã[/auth]")
                    }
                    const poll = await listPollsService()
                    console.log(poll)
                    return this._bot.sendMessage(msg.chat.id, poll[0].question, {
                        reply_markup: {inline_keyboard: pollKeyboardWithOptions(poll[0].answers, poll[0].id)},
                        resize_keyboard: true
                    })
            }
        })

        // Process callbacks
        this._bot.on('callback_query', async(ctx) => {
            switch(ctx.data) {
                case 'close': 
                    return this.#closeInlineKeyboard(ctx)
                case 'üìã Home': 
                    return this._bot.editMessageText('–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ö–û–ú–ê–ù–î–£ –ê–û ¬´–ù–ö ¬´“ö–¢–ñ¬ª!', {
                        chat_id: ctx.message.chat.id,
                        message_id: ctx.message.message_id,
                        reply_markup: {inline_keyboard: getWelcomeBookMesh()}, 
                        resize_keyboard: true
                    })
            }
            if (ctx.data.startsWith('wb')) {
                console.log(ctx)
                return await this._bot.editMessageText(this.#wbCallbacks[ctx.data], {
                    chat_id: ctx.message.chat.id,
                    message_id: ctx.message.message_id,
                    reply_markup: {
                        inline_keyboard: navButtonsMesh(this.#wbCallbacks, ctx.data),
                        resize_keyboard: true
                    },
                    parse_mode: "MarkdownV2"
                })
            }

            if (ctx.data.startsWith('poll')) {
                const data = ctx.data.split("_")
                const poll_id = data[1]
                const answer_id = data[2]
                
                await sendPollResponseService(poll_id, answer_id, ctx.from.username)

                const polls = await listPollsService()
                const id = polls.map(function(x) {return x.id}).indexOf(parseInt(poll_id, 10))
                if (!polls[id + 1]) {
                    this._bot.editMessageText('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤!', {
                        chat_id: ctx.message.chat.id,
                        message_id: ctx.message.message_id
                    })
                } else {
                    this._bot.editMessageText(polls[id + 1].question, {
                        chat_id: ctx.message.chat.id,
                        message_id: ctx.message.message_id,
                        reply_markup: {inline_keyboard: pollKeyboardWithOptions(polls[id + 1].answers, polls[id + 1].id)},
                        resize_keyboard: true
                    })
                }
                // const res = await sendPollResponseService(poll_id, answer_id, ctx.chat.username)
                // if (res.status === 200) {

                // }
            }
        })

        // Process errors
        this._bot.on('polling_error', console.log)
    }
}

export default Handler;